// A침adir la importaci칩n del servicio de usuario
const jwtService = require("../services/jwt.service");
const usuarioService = require("../services/usuario.service");

const authMiddleware = {
  // Middleware para verificar que el usuario est치 autenticado
  async authenticate(req, res, next) {
    try {
      // 1. Obtener y verificar el token
      const authHeader = req.headers["authorization"];
      if (!authHeader) {
        return res.status(401).json({ error: "Token no proporcionado." });
      }

      const token = authHeader.split(" ")[1];
      if (!token) {
        return res.status(401).json({ error: "Formato de token inv치lido." });
      }

      // Usamos verifyToken que verifica el JWT_SECRET
      const decodedToken = jwtService.verifyToken(token);
      if (!decodedToken) {
        return res.status(401).json({ error: "Token inv치lido o expirado." });
      }

      // 2. Obtener el usuario de la BD
      const usuario = await usuarioService.findById(decodedToken.id);

      if (!usuario) {
        return res
          .status(404)
          .json({ error: "Usuario asociado al token no encontrado." });
      }

      // 游띔 3. VERIFICACI칍N CLAVE: Bloquear si 2FA est치 activo pero no fue completado 游띔

      // La verificaci칩n clave aqu칤 es:
      // Si el usuario tiene 2FA habilitado (is_2fa_enabled: true)
      // Y, adem치s, el usuario NO ha completado la confirmaci칩n de email (confirmado_email: false)
      // O, M츼S IMPORTANTE, si el token utilizado NO ES un token de sesi칩n final.

      // Dado que est치s usando el MISMO JWT_SECRET para ambos tokens:
      // Debemos asegurar que el middleware SOLO permita el acceso si el 2FA est치 completado.

      if (usuario.is_2fa_enabled) {
        // El token temporal de 2FA (twoFaToken) no deber칤a tener el campo 'rol' o 'nombre_usuario'
        // En cambio, el token final S칈 los tiene (mira tu jwt.service.js)

        // UNA SOLUCI칍N LIMPIA ES VERIFICAR SI EL TOKEN ES UN TOKEN DE SESI칍N FINAL
        // Al revisar si tiene el campo 'rol' que solo le ponemos al token final.

        if (!decodedToken.rol) {
          // Si el token es solo el token temporal (que solo tiene 'id'), y el 2FA est치 activo, 춰Bloquear!
          return res
            .status(403)
            .json({
              error:
                "Acceso denegado. Se requiere completar la verificaci칩n 2FA.",
            });
        }
      }

      // 游띔 4. (Verificaci칩n de email ya existente, pero clave) 游띔
      if (!usuario.confirmado_email) {
        return res
          .status(403)
          .json({ error: "Acceso denegado. Confirme su correo electr칩nico." });
      }

      // 5. Almacenar los datos del usuario
      req.user = usuario;
      next();
    } catch (error) {
      // Usar status 401 si el error es por un token que el verifyToken no pudo decodificar
      res
        .status(401)
        .json({ error: "Token inv치lido o expirado. Vuelva a iniciar sesi칩n." });
    }
  },
  
  authorizeAdmin(req, res, next) {
    // El rol del usuario ya est치 en 'req.user' gracias al middleware anterior
    if (req.user && req.user.rol === "admin") {
      next(); // El usuario es admin, contin칰a
    } else {
      res
        .status(403)
        .json({ error: "Acceso denegado. Se requiere rol de administrador." });
    }
  },
};

module.exports = authMiddleware;
